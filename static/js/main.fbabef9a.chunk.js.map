{"version":3,"sources":["assets/images/logo.svg","components/logo/logo.component.jsx","components/header/header.component.jsx","components/card/card.component.jsx","components/cardList/cardList.component.jsx","components/navbar/navbar.component.jsx","components/searchInput/searchInput.component.jsx","components/footer/footer.conponent.jsx","app.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","src","logo","alt","className","Header","Card","user","id","name","email","phone","website","CardList","users","map","key","Navbar","children","SearchInput","onChangeHandler","placeholder","type","onChange","e","Footer","Date","getFullYear","App","useState","setUsers","filteredUsers","setFilteredUsers","searchField","setSearchField","useEffect","fetch","then","response","status","json","data","filter","toLowerCase","includes","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,kC,sSCO9BC,G,MAAO,kBAClB,yBACEC,IAAKC,IACLC,IAAI,gBACJC,UAAU,WCFDC,G,MAAS,kBACpB,4BAAQD,UAAU,UAChB,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,wBACf,kBAAC,EAAD,MACA,wBAAIA,UAAU,eAAd,uBCVOE,G,MAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAClB,yBAAKH,UAAU,QACb,yBACEH,IAAG,+BAA0BM,EAAKC,GAA/B,0BACHJ,UAAU,YACVD,IAAKI,EAAKE,OAEZ,uBAAGL,UAAU,YAAb,SACA,uBAAGA,UAAU,aAAaG,EAAKE,MAE/B,uBAAGL,UAAU,YAAb,UACA,uBAAGA,UAAU,aAAaG,EAAKG,OAE/B,uBAAGN,UAAU,YAAb,UACA,uBAAGA,UAAU,aAAaG,EAAKI,OAE/B,uBAAGP,UAAU,YAAb,YACA,uBAAGA,UAAU,aAAaG,EAAKK,YCdtBC,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,yBAAKV,UAAU,YACZU,GAASA,EAAMC,KAAI,SAAAR,GAAI,OAAI,kBAAC,EAAD,CAAMS,IAAKT,EAAKC,GAAID,KAAMA,UCL7CU,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACpB,yBAAKd,UAAU,UACZc,KCFQC,G,MAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,YAApB,OACzB,yBAAKjB,UAAU,eACb,2BACEkB,KAAK,SACLD,YAAaA,EACbjB,UAAU,mBACVmB,SAAU,SAAAC,GAAC,OAAIJ,EAAgBI,MAEjC,yBAAKpB,UAAU,0BCRNqB,G,MAAS,kBACpB,4BAAQrB,UAAU,UAChB,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,mBAAb,mBAA4C,IAAIsB,MAAOC,cAAvD,qB,MCyCSC,MArCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACLf,EADK,KACEgB,EADF,OAE+BD,mBAAS,IAFxC,mBAELE,EAFK,KAEUC,EAFV,OAG2BH,mBAAS,IAHpC,mBAGLI,EAHK,KAGQC,EAHR,KAsBb,OAjBAC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAyB,MAApBA,EAASC,QAAmBD,EAASE,UACvDH,MAAK,SAAAI,GAAI,OAAIX,EAASW,QACxB,IAEHN,qBAAU,WACRH,EAAiBlB,KAChB,CAAEA,IAELqB,qBAAU,WACRH,EAAiBlB,EAAM4B,QAAO,SAAAnC,GAAI,OAAIA,EAAKE,KACxCkC,cACAC,SAASX,EAAYU,qBAEvB,CAAEV,IAGH,yBAAK7B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEiB,YAAY,iBACZD,gBAAiB,SAACI,GAAD,OAAOU,EAAeV,EAAEqB,OAAOC,WAGpD,kBAAC,EAAD,CAAUhC,MAAOiB,IACjB,kBAAC,EAAD,Q,MCjCcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fbabef9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d37b8805.svg\";","// Core\r\nimport React from 'react';\r\n\r\n// Other\r\nimport logo from '../../assets/images/logo.svg';\r\nimport './logo.styles.css'\r\n\r\nexport const Logo = () => (\r\n  <img\r\n    src={logo}\r\n    alt='cat list logo'\r\n    className='logo'\r\n  />\r\n);\r\n","// Core\r\nimport React from 'react';\r\n\r\n// Components\r\nimport { Logo } from '../logo/logo.component';\r\n\r\n// Other\r\nimport './header.styles.css';\r\n\r\nexport const Header = () => (\r\n  <header className='header'>\r\n    <div className='headerContent'>\r\n      <div className='headerShapePrimary' />\r\n      <div className='headerShapeSecondary' />\r\n      <div className='headerShapeTertiary' />\r\n      <Logo/>\r\n      <h1 className='headerTitle'>The Cat Gallery</h1>\r\n    </div>\r\n  </header>\r\n);\r\n","// Core\r\nimport React from 'react';\r\n\r\n// Other\r\nimport './card.styles.css';\r\n\r\nexport const Card = ({ user }) => (\r\n  <div className='card'>\r\n    <img\r\n      src={`https://robohash.org/${user.id}?set=set4&size=180x180`}\r\n      className='cardImage'\r\n      alt={user.name}\r\n    />\r\n    <p className='cardInfo'>Name:</p>\r\n    <p className='cardTitle'>{user.name}</p>\r\n\r\n    <p className='cardInfo'>Email:</p>\r\n    <p className='cardTitle'>{user.email}</p>\r\n\r\n    <p className='cardInfo'>Phone:</p>\r\n    <p className='cardTitle'>{user.phone}</p>\r\n\r\n    <p className='cardInfo'>Website:</p>\r\n    <p className='cardTitle'>{user.website}</p>\r\n  </div>\r\n);\r\n","// Core\r\nimport React from 'react';\r\n\r\n// Component\r\nimport { Card } from '../card/card.component';\r\n\r\n// Other\r\nimport './cardList.styles.css';\r\n\r\nexport const CardList = ({ users }) => (\r\n  <div className='cardList'>\r\n    {users && users.map(user => <Card key={user.id} user={user} />)}\r\n  </div>\r\n);\r\n","// Core\r\nimport React from 'react';\r\n\r\n// Other\r\nimport './navbar.styles.css';\r\n\r\nexport const Navbar = ({ children }) => (\r\n  <div className='navbar'>\r\n    {children}\r\n  </div>\r\n);\r\n","// Core\r\nimport React from 'react';\r\n\r\n// Other\r\nimport './searchInput.styles.css';\r\n\r\nexport const SearchInput = ({ onChangeHandler, placeholder }) => (\r\n  <div className='searchInput'>\r\n    <input\r\n      type='search'\r\n      placeholder={placeholder}\r\n      className='searchInputField'\r\n      onChange={e => onChangeHandler(e)}\r\n    />\r\n    <div className='searchInputDivider' />\r\n  </div>\r\n);\r\n","// Core\r\nimport React from 'react';\r\n\r\n// Other\r\nimport './footer.styles.css';\r\n\r\nexport const Footer = () => (\r\n  <footer className='footer'>\r\n    <div className='footerContent'>\r\n      <p className='footerCopyright'>Copyright Â© {new Date().getFullYear()} by Mr. Hapon</p>\r\n    </div>\r\n  </footer>\r\n);\r\n","// Core\nimport React, { useEffect, useState } from 'react';\n\n//Components\nimport { Header } from './components/header/header.component';\nimport { CardList } from './components/cardList/cardList.component';\nimport { Navbar } from './components/navbar/navbar.component';\nimport { SearchInput } from './components/searchInput/searchInput.component';\nimport { Footer } from './components/footer/footer.conponent'\n\n// Other\nimport './app.css';\n\nfunction App() {\n  const [ users, setUsers ] = useState([]);\n  const [ filteredUsers, setFilteredUsers ] = useState([]);\n  const [ searchField, setSearchField ] = useState('');\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => (response.status === 200) && response.json())\n      .then(data => setUsers(data));\n  }, []);\n\n  useEffect(() => {\n    setFilteredUsers(users)\n  }, [ users ]);\n\n  useEffect(() => {\n    setFilteredUsers(users.filter(user => user.name\n      .toLowerCase()\n      .includes(searchField.toLowerCase())\n    ));\n  }, [ searchField ]);\n\n  return (\n    <div className='app'>\n      <Header />\n      <Navbar>\n        <SearchInput\n          placeholder='Search by Name'\n          onChangeHandler={(e) => setSearchField(e.target.value)}\n        />\n      </Navbar>\n      <CardList users={filteredUsers} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Core\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Components\nimport App from './app';\n\n// Other\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}